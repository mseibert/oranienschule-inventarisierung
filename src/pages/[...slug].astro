---
import Inventar from '../components/Inventar.astro';
import InventarList from '../components/InventarList.astro';
import Layout from '../layouts/Layout.astro';
import { getSeatableMetadata, getInventarListWithImages } from '../lib/seatable';

interface SeatableMetadata {
  app_name: string;
  access_token: string;
  dtable_uuid: string;
  dtable_server: string;
  dtable_socket: string;
  dtable_db: string;
  workspace_id: number;
  dtable_name: string;
  use_api_gateway: boolean;
}

export interface inventarTeil {
  results: Array<{
    Name: string;
    Bezeichnung: string;
    Kategorie: string;
    'Hersteller/Marke/Autor/Komponist': string;
    Modell: string;
    Seriennummer: string;
    Anschaffungsdatum: string | null;
    Anschaffungskosten: number;
    Bild: string | null;
    Bilddownload: string[] | null;
    Zustand: string | null;
    'Letzte Wartung': string | null;
    Verleihstatus: string;
    Verantwortlich: string;
    Bemerkungen: string;
    'QR-Code': string | null;
    _locked: null;
    _locked_by: null;
    _archived: boolean;
    _creator: string;
    _ctime: string;
    _last_modifier: string;
    _mtime: string;
    _id: string;
  }>;
}

export async function getStaticPaths() {
  const token = import.meta.env.SEATABLE_API_TOKEN;
  const seatableMetadata = await getSeatableMetadata(token);
  const inventarList = await getInventarListWithImages(seatableMetadata);

  type Page = {
    slug: string | undefined;
    title: string;
    text: string;
    item?: any;
  };

  const pages: Page[] = [
    ...inventarList.results.map(item => ({
      slug: `${item._id}`,
      title: item.Name,
      text: item.Bezeichnung,
      item: item
    }))
  ];

  return pages.map(({ slug, title, text, item }) => {
    return {
      params: { slug },
      props: { title, text, item },
    };
  });
}

const allPages = await getStaticPaths();
const { title, text, item } = Astro.props;
---
<Layout>
	<InventarList pages={allPages} />
	<Inventar item={item} />
</Layout>

<style>
  .links {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    padding: 1rem;
  }

  .link-item {
    padding: 0.5rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
    transition: all 0.2s;
  }

  .link-item:hover {
    background-color: #f3f4f6;
    transform: translateX(0.5rem);
  }

  .link-item a {
    text-decoration: none;
    color: #374151;
  }
</style>
